 Problem 5:

Design a cash register drawer function checkCashRegister() that accepts purchase price as the first argument (price), payment as the second argument (cash), and cash-in-drawer (cid) as the third argument.

cid is a 2D array listing available currency.

The checkCashRegister() function should always return an object with a status key and a change key.

Return {status: "INSUFFICIENT_FUNDS", change: []} if cash-in-drawer is less than the change due, or if you cannot return the exact change.

Return {status: "CLOSED", change: [...]} with cash-in-drawer as the value for the key change if it is equal to the change due.

Otherwise, return {status: "OPEN", change: [...]}, with the change due in coins and bills, sorted in highest to lowest order, as the value of the change key.

Remember to use Read-Search-Ask if you get stuck. Try to pair program. Write your own code.

Currency Unit	     Amount
Penny	             $0.01 (PENNY)
Nickel	             $0.05 (NICKEL)
Dime	             $0.1 (DIME)
Quarter	             $0.25 (QUARTER)
Dollar	             $1 (DOLLAR)
Five Dollars	     $5 (FIVE)
Ten Dollars	     $10 (TEN)
Twenty Dollars	     $20 (TWENTY)
One-hundred Dollars  $100 (ONE HUNDRED)
--------------------------------------------------------------------------------------------------------

My final answer to the question:


function checkCashRegister(price, cash, cid) {
  var cashInDrawerCopy = JSON.parse(JSON.stringify(cid))
  cashInDrawerCopy.reverse();
  
  const value = {
    "PENNY": 0.01,
    "NICKEL": 0.05,
    "DIME": 0.10,
    "QUARTER": 0.25,
    "ONE": 1.00,
    "FIVE": 5.00,
    "TEN": 10.00,
    "TWENTY": 20.00,
    "ONE HUNDRED": 100.00
  };

  var startingChange = cash - price;
  var remainingChange = startingChange;

  var changeObj = {
    status: '',
    change: []
  };

  var j = 0;

  cashInDrawerCopy.forEach(x => {
    x[1] = parseFloat(x[1]);
    if(value[x[0]] < startingChange && remainingChange > 0 && remainingChange > value[x[0]]) {
      changeObj.change.push([x[0], 0])
      changeObj.status = "OPEN";
      while (remainingChange - value[x[0]] >= 0 && x[1] - value[x[0]] >= 0) {
        x[1] = (x[1] - value[x[0]]).toFixed(2);
        remainingChange = (remainingChange - value[x[0]]).toFixed(2);
        changeObj.change[j][1] = +(+changeObj.change[j][1] + value[x[0]]).toFixed(2);
      }
      j += 1;
    }
  });

  if (remainingChange > 0.01) {
    changeObj.status = 'INSUFFICIENT_FUNDS';
    changeObj.change = [];
  } else if (cashInDrawerCopy.every(x => {return x[1] < .01;})) {
    changeObj.status = 'CLOSED';
    changeObj.change = cid;
  } 

  console.log(changeObj);
  return changeObj;
}


// Example cash-in-drawer array:
// [["PENNY", 1.01],
// ["NICKEL", 2.05],
// ["DIME", 3.1],
// ["QUARTER", 4.25],
// ["ONE", 90],
// ["FIVE", 55],
// ["TEN", 20],
// ["TWENTY", 60],
// ["ONE HUNDRED", 100]]

checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]);
